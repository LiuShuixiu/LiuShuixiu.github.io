(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{372:function(a,s,n){"use strict";n.r(s);var t=n(14),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("p",[a._v("在训练数据不够多时，或者overtraining时，常常会导致overfitting（过拟合）。其直观的表现如下图所示，随着训练过程的进行，模型复杂度增加，在training data上的error渐渐减小，但是在验证集上的error却反而渐渐增大——因为训练出来的网络过拟合了训练集，对训练集外的数据却不工作。")]),a._v(" "),s("h3",{attrs:{id:"避免过拟合的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免过拟合的方法"}},[a._v("#")]),a._v(" 避免过拟合的方法")]),a._v(" "),s("p",[a._v("1.early stopping 2.增加数据 3.L2正则化 4.dropout正则化")]),a._v(" "),s("h3",{attrs:{id:"l2正则化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#l2正则化"}},[a._v("#")]),a._v(" L2正则化")]),a._v(" "),s("p",[a._v("L2正则化就是在原本的损失函数的基础上增加了所有层所有参数的平方和。λ就是正则项系数，权衡正则项与原损失函数项的比重。系数1/2主要是为了后面求导的结果方便，后面那一项求导会产生一个2，与1/2相乘刚好凑整。")]),a._v(" "),s("p",[a._v("L(w,b)+λ2∥w∥2,")]),a._v(" "),s("p",[a._v("L2正则化回归的小批量随机梯度下降更新如下式：")]),a._v(" "),s("p",[a._v("w←(1−ηλ)w−η|B|∑i∈Bx(i)(w⊤x(i)+b−y(i)).")]),a._v(" "),s("p",[a._v("在不使用L2正则化时，求导结果中w前系数为1，现在w前面系数为 1−ηλ/m ，因为η、λ、m都是正的，所以 1−ηλ/n小于1，它的效果是减小w，这也就是权重衰减（weight decay）的由来。当然考虑到后面的导数项，w最终的值可能增大也可能减小。")]),a._v(" "),s("h3",{attrs:{id:"为什么l2正则化能防止过拟合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么l2正则化能防止过拟合"}},[a._v("#")]),a._v(" 为什么L2正则化能防止过拟合")]),a._v(" "),s("p",[a._v("到目前为止，我们只是解释了L2正则化项有让w“变小”的效果，但是还没解释为什么w“变小”可以防止overfitting？一个所谓“显而易见”的解释就是：更小的权值w，从某种意义上说，表示网络的复杂度更低，对数据的拟合刚刚好（这个法则也叫做奥卡姆剃刀），而在实际应用中，也验证了这一点，L2正则化的效果往往好于未经正则化的效果。")]),a._v(" "),s("h3",{attrs:{id:"在pytorch框架中简洁实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在pytorch框架中简洁实现"}},[a._v("#")]),a._v(" 在Pytorch框架中简洁实现")]),a._v(" "),s("p",[a._v("由于权重衰减在神经网络优化中很常用， 深度学习框架为了便于我们使用权重衰减， 将"),s("strong",[a._v("权重衰减集成到优化算法")]),a._v("中，以便与任何损失函数结合使用。 此外，这种集成还有计算上的好处， 允许在不增加任何额外的计算开销的情况下向算法中添加权重衰减。 由于更新的权重衰减部分仅依赖于每个参数的当前值， 因此优化器必须至少接触每个参数一次。")]),a._v(" "),s("p",[a._v("在下面的代码中，我们在实例化优化器时直接通过"),s("code",[a._v("weight_decay")]),a._v("指定weight decay超参数。 默认情况下，PyTorch同时衰减权重和偏移。 这里我们只为权重设置了"),s("code",[a._v("weight_decay")]),a._v("，所以偏置参数b不会衰减。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("def train_concise(wd):\n    net = nn.Sequential(nn.Linear(num_inputs, 1))\n    for param in net.parameters():\n        param.data.normal_()\n    loss = nn.MSELoss(reduction='none')\n    num_epochs, lr = 100, 0.003\n    # 偏置参数没有衰减\n    trainer = torch.optim.SGD([\n        {\"params\":net[0].weight,'weight_decay': wd},\n        {\"params\":net[0].bias}], lr=lr)\n    animator = d2l.Animator(xlabel='epochs', ylabel='loss', yscale='log',\n                            xlim=[5, num_epochs], legend=['train', 'test'])\n    for epoch in range(num_epochs):\n        for X, y in train_iter:\n            trainer.zero_grad()\n            l = loss(net(X), y)\n            l.mean().backward()\n            trainer.step()\n        if (epoch + 1) % 5 == 0:\n            animator.add(epoch + 1,\n                         (d2l.evaluate_loss(net, train_iter, loss),\n                          d2l.evaluate_loss(net, test_iter, loss)))\n    print('w的L2范数：', net[0].weight.norm().item()) \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br")])]),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("正则说白了就是增加模型的泛化能力")])]),a._v(" "),s("li",[s("p",[a._v("正则化是处理过拟合的常用方法：在训练集的损失函数中加入惩罚项，以降低学习到的模型的复杂度。")]),a._v(" "),s("p",[a._v("正则化只在训练中使用，他们影响模型参数的更新，在测试时不使用。")])]),a._v(" "),s("li",[s("p",[a._v("保持模型简单的一个特别的选择是使用L2惩罚的权重衰减。这会导致学习算法更新步骤中的权重衰减。")])]),a._v(" "),s("li",[s("p",[a._v("权重衰减功能在深度学习框架的优化器中提供。")])]),a._v(" "),s("li",[s("p",[a._v("在同一训练代码实现中，不同的参数集可以有不同的更新行为。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);